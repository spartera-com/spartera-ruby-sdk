=begin
#Spartera API Documentation

#Auto-generated API documentation for REST services of the Spartera platform

The version of the OpenAPI document: 0.0.0
Contact: support@spartera.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module SparteraApiSdk
  # Model for every connection setup from our platform
  class Connection
    attr_accessor :connection_id

    attr_accessor :user_id

    attr_accessor :engine_id

    attr_accessor :company_id

    attr_accessor :credential_type

    attr_accessor :api_provider

    attr_accessor :api_endpoint

    attr_accessor :api_key_location

    attr_accessor :api_key_param

    attr_accessor :api_key_value

    attr_accessor :visibility

    attr_accessor :name

    attr_accessor :description

    attr_accessor :gcp_secret_id

    attr_accessor :provider_domain

    attr_accessor :verified_usage_ability

    attr_accessor :date_created

    attr_accessor :last_updated

    attr_accessor :active

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'connection_id' => :'connection_id',
        :'user_id' => :'user_id',
        :'engine_id' => :'engine_id',
        :'company_id' => :'company_id',
        :'credential_type' => :'credential_type',
        :'api_provider' => :'api_provider',
        :'api_endpoint' => :'api_endpoint',
        :'api_key_location' => :'api_key_location',
        :'api_key_param' => :'api_key_param',
        :'api_key_value' => :'api_key_value',
        :'visibility' => :'visibility',
        :'name' => :'name',
        :'description' => :'description',
        :'gcp_secret_id' => :'gcp_secret_id',
        :'provider_domain' => :'provider_domain',
        :'verified_usage_ability' => :'verified_usage_ability',
        :'date_created' => :'date_created',
        :'last_updated' => :'last_updated',
        :'active' => :'active'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'connection_id' => :'String',
        :'user_id' => :'String',
        :'engine_id' => :'String',
        :'company_id' => :'String',
        :'credential_type' => :'String',
        :'api_provider' => :'String',
        :'api_endpoint' => :'String',
        :'api_key_location' => :'String',
        :'api_key_param' => :'String',
        :'api_key_value' => :'String',
        :'visibility' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'gcp_secret_id' => :'String',
        :'provider_domain' => :'String',
        :'verified_usage_ability' => :'String',
        :'date_created' => :'String',
        :'last_updated' => :'String',
        :'active' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SparteraApiSdk::Connection` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SparteraApiSdk::Connection`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'connection_id')
        self.connection_id = attributes[:'connection_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'engine_id')
        self.engine_id = attributes[:'engine_id']
      else
        self.engine_id = nil
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      else
        self.company_id = nil
      end

      if attributes.key?(:'credential_type')
        self.credential_type = attributes[:'credential_type']
      end

      if attributes.key?(:'api_provider')
        self.api_provider = attributes[:'api_provider']
      end

      if attributes.key?(:'api_endpoint')
        self.api_endpoint = attributes[:'api_endpoint']
      end

      if attributes.key?(:'api_key_location')
        self.api_key_location = attributes[:'api_key_location']
      end

      if attributes.key?(:'api_key_param')
        self.api_key_param = attributes[:'api_key_param']
      end

      if attributes.key?(:'api_key_value')
        self.api_key_value = attributes[:'api_key_value']
      end

      if attributes.key?(:'visibility')
        self.visibility = attributes[:'visibility']
      else
        self.visibility = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'gcp_secret_id')
        self.gcp_secret_id = attributes[:'gcp_secret_id']
      end

      if attributes.key?(:'provider_domain')
        self.provider_domain = attributes[:'provider_domain']
      end

      if attributes.key?(:'verified_usage_ability')
        self.verified_usage_ability = attributes[:'verified_usage_ability']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'last_updated')
        self.last_updated = attributes[:'last_updated']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @engine_id.nil?
        invalid_properties.push('invalid value for "engine_id", engine_id cannot be nil.')
      end

      if @company_id.nil?
        invalid_properties.push('invalid value for "company_id", company_id cannot be nil.')
      end

      if @visibility.nil?
        invalid_properties.push('invalid value for "visibility", visibility cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @engine_id.nil?
      return false if @company_id.nil?
      return false if @visibility.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] engine_id Value to be assigned
    def engine_id=(engine_id)
      if engine_id.nil?
        fail ArgumentError, 'engine_id cannot be nil'
      end

      @engine_id = engine_id
    end

    # Custom attribute writer method with validation
    # @param [Object] company_id Value to be assigned
    def company_id=(company_id)
      if company_id.nil?
        fail ArgumentError, 'company_id cannot be nil'
      end

      @company_id = company_id
    end

    # Custom attribute writer method with validation
    # @param [Object] visibility Value to be assigned
    def visibility=(visibility)
      if visibility.nil?
        fail ArgumentError, 'visibility cannot be nil'
      end

      @visibility = visibility
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          connection_id == o.connection_id &&
          user_id == o.user_id &&
          engine_id == o.engine_id &&
          company_id == o.company_id &&
          credential_type == o.credential_type &&
          api_provider == o.api_provider &&
          api_endpoint == o.api_endpoint &&
          api_key_location == o.api_key_location &&
          api_key_param == o.api_key_param &&
          api_key_value == o.api_key_value &&
          visibility == o.visibility &&
          name == o.name &&
          description == o.description &&
          gcp_secret_id == o.gcp_secret_id &&
          provider_domain == o.provider_domain &&
          verified_usage_ability == o.verified_usage_ability &&
          date_created == o.date_created &&
          last_updated == o.last_updated &&
          active == o.active
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [connection_id, user_id, engine_id, company_id, credential_type, api_provider, api_endpoint, api_key_location, api_key_param, api_key_value, visibility, name, description, gcp_secret_id, provider_domain, verified_usage_ability, date_created, last_updated, active].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SparteraApiSdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
