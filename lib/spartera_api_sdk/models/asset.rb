=begin
#Spartera API Documentation

#Auto-generated API documentation for REST services of the Spartera platform

The version of the OpenAPI document: 0.0.0
Contact: support@spartera.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module SparteraApiSdk
  # Asset model for every asset (insight/visualization/feed/etc.) customer creates
  class Asset
    attr_accessor :asset_id

    attr_accessor :user_id

    attr_accessor :company_id

    attr_accessor :connection_id

    attr_accessor :llm_connection_id

    attr_accessor :snippet_id

    attr_accessor :industry_id

    attr_accessor :ai_job_id

    attr_accessor :approval_status

    attr_accessor :approved_by_user_id

    attr_accessor :approved_at

    attr_accessor :name

    attr_accessor :slug

    attr_accessor :description

    attr_accessor :source

    attr_accessor :asset_type

    attr_accessor :asset_schema

    attr_accessor :visibility

    attr_accessor :tags

    attr_accessor :sql_logic

    attr_accessor :source_schema_name

    attr_accessor :source_table_name

    attr_accessor :sell_in_marketplace

    attr_accessor :viz_chart_library

    attr_accessor :viz_chart_type

    attr_accessor :viz_dep_var_col_name

    attr_accessor :viz_indep_var_col_name

    attr_accessor :viz_size_col_name

    attr_accessor :viz_color_col_name

    attr_accessor :viz_data_aggregation

    attr_accessor :viz_sort_direction

    attr_accessor :viz_data_limit

    attr_accessor :viz_color_scheme

    attr_accessor :allow_params

    attr_accessor :accept_terms

    attr_accessor :cached

    attr_accessor :schedule

    attr_accessor :next_run

    attr_accessor :data_time_period_start

    attr_accessor :data_time_period_end

    attr_accessor :geographic_coverage_type

    attr_accessor :geographic_coverage_details

    attr_accessor :data_source_refresh_frequency

    attr_accessor :data_source_last_refreshed

    attr_accessor :date_created

    attr_accessor :last_updated

    attr_accessor :active

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'asset_id' => :'asset_id',
        :'user_id' => :'user_id',
        :'company_id' => :'company_id',
        :'connection_id' => :'connection_id',
        :'llm_connection_id' => :'llm_connection_id',
        :'snippet_id' => :'snippet_id',
        :'industry_id' => :'industry_id',
        :'ai_job_id' => :'ai_job_id',
        :'approval_status' => :'approval_status',
        :'approved_by_user_id' => :'approved_by_user_id',
        :'approved_at' => :'approved_at',
        :'name' => :'name',
        :'slug' => :'slug',
        :'description' => :'description',
        :'source' => :'source',
        :'asset_type' => :'asset_type',
        :'asset_schema' => :'asset_schema',
        :'visibility' => :'visibility',
        :'tags' => :'tags',
        :'sql_logic' => :'sql_logic',
        :'source_schema_name' => :'source_schema_name',
        :'source_table_name' => :'source_table_name',
        :'sell_in_marketplace' => :'sell_in_marketplace',
        :'viz_chart_library' => :'viz_chart_library',
        :'viz_chart_type' => :'viz_chart_type',
        :'viz_dep_var_col_name' => :'viz_dep_var_col_name',
        :'viz_indep_var_col_name' => :'viz_indep_var_col_name',
        :'viz_size_col_name' => :'viz_size_col_name',
        :'viz_color_col_name' => :'viz_color_col_name',
        :'viz_data_aggregation' => :'viz_data_aggregation',
        :'viz_sort_direction' => :'viz_sort_direction',
        :'viz_data_limit' => :'viz_data_limit',
        :'viz_color_scheme' => :'viz_color_scheme',
        :'allow_params' => :'allow_params',
        :'accept_terms' => :'accept_terms',
        :'cached' => :'cached',
        :'schedule' => :'schedule',
        :'next_run' => :'next_run',
        :'data_time_period_start' => :'data_time_period_start',
        :'data_time_period_end' => :'data_time_period_end',
        :'geographic_coverage_type' => :'geographic_coverage_type',
        :'geographic_coverage_details' => :'geographic_coverage_details',
        :'data_source_refresh_frequency' => :'data_source_refresh_frequency',
        :'data_source_last_refreshed' => :'data_source_last_refreshed',
        :'date_created' => :'date_created',
        :'last_updated' => :'last_updated',
        :'active' => :'active'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'asset_id' => :'String',
        :'user_id' => :'String',
        :'company_id' => :'String',
        :'connection_id' => :'String',
        :'llm_connection_id' => :'String',
        :'snippet_id' => :'String',
        :'industry_id' => :'String',
        :'ai_job_id' => :'String',
        :'approval_status' => :'String',
        :'approved_by_user_id' => :'String',
        :'approved_at' => :'String',
        :'name' => :'String',
        :'slug' => :'String',
        :'description' => :'String',
        :'source' => :'String',
        :'asset_type' => :'String',
        :'asset_schema' => :'String',
        :'visibility' => :'String',
        :'tags' => :'String',
        :'sql_logic' => :'String',
        :'source_schema_name' => :'String',
        :'source_table_name' => :'String',
        :'sell_in_marketplace' => :'String',
        :'viz_chart_library' => :'String',
        :'viz_chart_type' => :'String',
        :'viz_dep_var_col_name' => :'String',
        :'viz_indep_var_col_name' => :'String',
        :'viz_size_col_name' => :'String',
        :'viz_color_col_name' => :'String',
        :'viz_data_aggregation' => :'String',
        :'viz_sort_direction' => :'String',
        :'viz_data_limit' => :'String',
        :'viz_color_scheme' => :'String',
        :'allow_params' => :'String',
        :'accept_terms' => :'String',
        :'cached' => :'String',
        :'schedule' => :'String',
        :'next_run' => :'String',
        :'data_time_period_start' => :'String',
        :'data_time_period_end' => :'String',
        :'geographic_coverage_type' => :'String',
        :'geographic_coverage_details' => :'String',
        :'data_source_refresh_frequency' => :'String',
        :'data_source_last_refreshed' => :'String',
        :'date_created' => :'String',
        :'last_updated' => :'String',
        :'active' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SparteraApiSdk::Asset` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SparteraApiSdk::Asset`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'asset_id')
        self.asset_id = attributes[:'asset_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      else
        self.company_id = nil
      end

      if attributes.key?(:'connection_id')
        self.connection_id = attributes[:'connection_id']
      end

      if attributes.key?(:'llm_connection_id')
        self.llm_connection_id = attributes[:'llm_connection_id']
      end

      if attributes.key?(:'snippet_id')
        self.snippet_id = attributes[:'snippet_id']
      end

      if attributes.key?(:'industry_id')
        self.industry_id = attributes[:'industry_id']
      end

      if attributes.key?(:'ai_job_id')
        self.ai_job_id = attributes[:'ai_job_id']
      end

      if attributes.key?(:'approval_status')
        self.approval_status = attributes[:'approval_status']
      end

      if attributes.key?(:'approved_by_user_id')
        self.approved_by_user_id = attributes[:'approved_by_user_id']
      end

      if attributes.key?(:'approved_at')
        self.approved_at = attributes[:'approved_at']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      else
        self.source = nil
      end

      if attributes.key?(:'asset_type')
        self.asset_type = attributes[:'asset_type']
      end

      if attributes.key?(:'asset_schema')
        self.asset_schema = attributes[:'asset_schema']
      end

      if attributes.key?(:'visibility')
        self.visibility = attributes[:'visibility']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'sql_logic')
        self.sql_logic = attributes[:'sql_logic']
      end

      if attributes.key?(:'source_schema_name')
        self.source_schema_name = attributes[:'source_schema_name']
      end

      if attributes.key?(:'source_table_name')
        self.source_table_name = attributes[:'source_table_name']
      end

      if attributes.key?(:'sell_in_marketplace')
        self.sell_in_marketplace = attributes[:'sell_in_marketplace']
      end

      if attributes.key?(:'viz_chart_library')
        self.viz_chart_library = attributes[:'viz_chart_library']
      end

      if attributes.key?(:'viz_chart_type')
        self.viz_chart_type = attributes[:'viz_chart_type']
      end

      if attributes.key?(:'viz_dep_var_col_name')
        self.viz_dep_var_col_name = attributes[:'viz_dep_var_col_name']
      end

      if attributes.key?(:'viz_indep_var_col_name')
        self.viz_indep_var_col_name = attributes[:'viz_indep_var_col_name']
      end

      if attributes.key?(:'viz_size_col_name')
        self.viz_size_col_name = attributes[:'viz_size_col_name']
      end

      if attributes.key?(:'viz_color_col_name')
        self.viz_color_col_name = attributes[:'viz_color_col_name']
      end

      if attributes.key?(:'viz_data_aggregation')
        self.viz_data_aggregation = attributes[:'viz_data_aggregation']
      end

      if attributes.key?(:'viz_sort_direction')
        self.viz_sort_direction = attributes[:'viz_sort_direction']
      end

      if attributes.key?(:'viz_data_limit')
        self.viz_data_limit = attributes[:'viz_data_limit']
      end

      if attributes.key?(:'viz_color_scheme')
        self.viz_color_scheme = attributes[:'viz_color_scheme']
      end

      if attributes.key?(:'allow_params')
        self.allow_params = attributes[:'allow_params']
      end

      if attributes.key?(:'accept_terms')
        self.accept_terms = attributes[:'accept_terms']
      end

      if attributes.key?(:'cached')
        self.cached = attributes[:'cached']
      end

      if attributes.key?(:'schedule')
        self.schedule = attributes[:'schedule']
      end

      if attributes.key?(:'next_run')
        self.next_run = attributes[:'next_run']
      end

      if attributes.key?(:'data_time_period_start')
        self.data_time_period_start = attributes[:'data_time_period_start']
      end

      if attributes.key?(:'data_time_period_end')
        self.data_time_period_end = attributes[:'data_time_period_end']
      end

      if attributes.key?(:'geographic_coverage_type')
        self.geographic_coverage_type = attributes[:'geographic_coverage_type']
      end

      if attributes.key?(:'geographic_coverage_details')
        self.geographic_coverage_details = attributes[:'geographic_coverage_details']
      end

      if attributes.key?(:'data_source_refresh_frequency')
        self.data_source_refresh_frequency = attributes[:'data_source_refresh_frequency']
      end

      if attributes.key?(:'data_source_last_refreshed')
        self.data_source_last_refreshed = attributes[:'data_source_last_refreshed']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'last_updated')
        self.last_updated = attributes[:'last_updated']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @company_id.nil?
        invalid_properties.push('invalid value for "company_id", company_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @source.nil?
        invalid_properties.push('invalid value for "source", source cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @company_id.nil?
      return false if @name.nil?
      return false if @source.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] company_id Value to be assigned
    def company_id=(company_id)
      if company_id.nil?
        fail ArgumentError, 'company_id cannot be nil'
      end

      @company_id = company_id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] source Value to be assigned
    def source=(source)
      if source.nil?
        fail ArgumentError, 'source cannot be nil'
      end

      @source = source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          asset_id == o.asset_id &&
          user_id == o.user_id &&
          company_id == o.company_id &&
          connection_id == o.connection_id &&
          llm_connection_id == o.llm_connection_id &&
          snippet_id == o.snippet_id &&
          industry_id == o.industry_id &&
          ai_job_id == o.ai_job_id &&
          approval_status == o.approval_status &&
          approved_by_user_id == o.approved_by_user_id &&
          approved_at == o.approved_at &&
          name == o.name &&
          slug == o.slug &&
          description == o.description &&
          source == o.source &&
          asset_type == o.asset_type &&
          asset_schema == o.asset_schema &&
          visibility == o.visibility &&
          tags == o.tags &&
          sql_logic == o.sql_logic &&
          source_schema_name == o.source_schema_name &&
          source_table_name == o.source_table_name &&
          sell_in_marketplace == o.sell_in_marketplace &&
          viz_chart_library == o.viz_chart_library &&
          viz_chart_type == o.viz_chart_type &&
          viz_dep_var_col_name == o.viz_dep_var_col_name &&
          viz_indep_var_col_name == o.viz_indep_var_col_name &&
          viz_size_col_name == o.viz_size_col_name &&
          viz_color_col_name == o.viz_color_col_name &&
          viz_data_aggregation == o.viz_data_aggregation &&
          viz_sort_direction == o.viz_sort_direction &&
          viz_data_limit == o.viz_data_limit &&
          viz_color_scheme == o.viz_color_scheme &&
          allow_params == o.allow_params &&
          accept_terms == o.accept_terms &&
          cached == o.cached &&
          schedule == o.schedule &&
          next_run == o.next_run &&
          data_time_period_start == o.data_time_period_start &&
          data_time_period_end == o.data_time_period_end &&
          geographic_coverage_type == o.geographic_coverage_type &&
          geographic_coverage_details == o.geographic_coverage_details &&
          data_source_refresh_frequency == o.data_source_refresh_frequency &&
          data_source_last_refreshed == o.data_source_last_refreshed &&
          date_created == o.date_created &&
          last_updated == o.last_updated &&
          active == o.active
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [asset_id, user_id, company_id, connection_id, llm_connection_id, snippet_id, industry_id, ai_job_id, approval_status, approved_by_user_id, approved_at, name, slug, description, source, asset_type, asset_schema, visibility, tags, sql_logic, source_schema_name, source_table_name, sell_in_marketplace, viz_chart_library, viz_chart_type, viz_dep_var_col_name, viz_indep_var_col_name, viz_size_col_name, viz_color_col_name, viz_data_aggregation, viz_sort_direction, viz_data_limit, viz_color_scheme, allow_params, accept_terms, cached, schedule, next_run, data_time_period_start, data_time_period_end, geographic_coverage_type, geographic_coverage_details, data_source_refresh_frequency, data_source_last_refreshed, date_created, last_updated, active].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SparteraApiSdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
