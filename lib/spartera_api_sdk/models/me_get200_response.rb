=begin
#Spartera API Documentation

#Auto-generated API documentation for REST services of the Spartera platform

The version of the OpenAPI document: 0.0.0
Contact: support@spartera.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module SparteraApiSdk
  class MeGet200Response
    # Firebase user ID
    attr_accessor :user_id

    # User email address
    attr_accessor :email

    # Authentication method used
    attr_accessor :auth_method

    # Platform origin
    attr_accessor :platform

    # Request origin domain
    attr_accessor :origin_domain

    attr_accessor :profile

    # Company ID from authentication claims
    attr_accessor :company_id

    # Role ID from authentication claims
    attr_accessor :role_id

    attr_accessor :token_metadata

    attr_accessor :api_key_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'user_id',
        :'email' => :'email',
        :'auth_method' => :'auth_method',
        :'platform' => :'platform',
        :'origin_domain' => :'origin_domain',
        :'profile' => :'profile',
        :'company_id' => :'company_id',
        :'role_id' => :'role_id',
        :'token_metadata' => :'token_metadata',
        :'api_key_info' => :'api_key_info'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'user_id' => :'String',
        :'email' => :'String',
        :'auth_method' => :'String',
        :'platform' => :'String',
        :'origin_domain' => :'String',
        :'profile' => :'MeGet200ResponseProfile',
        :'company_id' => :'String',
        :'role_id' => :'Integer',
        :'token_metadata' => :'MeGet200ResponseTokenMetadata',
        :'api_key_info' => :'MeGet200ResponseApiKeyInfo'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SparteraApiSdk::MeGet200Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SparteraApiSdk::MeGet200Response`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      else
        self.user_id = nil
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'auth_method')
        self.auth_method = attributes[:'auth_method']
      else
        self.auth_method = nil
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'origin_domain')
        self.origin_domain = attributes[:'origin_domain']
      end

      if attributes.key?(:'profile')
        self.profile = attributes[:'profile']
      else
        self.profile = nil
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      else
        self.company_id = nil
      end

      if attributes.key?(:'role_id')
        self.role_id = attributes[:'role_id']
      else
        self.role_id = nil
      end

      if attributes.key?(:'token_metadata')
        self.token_metadata = attributes[:'token_metadata']
      end

      if attributes.key?(:'api_key_info')
        self.api_key_info = attributes[:'api_key_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @auth_method.nil?
        invalid_properties.push('invalid value for "auth_method", auth_method cannot be nil.')
      end

      if @profile.nil?
        invalid_properties.push('invalid value for "profile", profile cannot be nil.')
      end

      if @company_id.nil?
        invalid_properties.push('invalid value for "company_id", company_id cannot be nil.')
      end

      if @role_id.nil?
        invalid_properties.push('invalid value for "role_id", role_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @user_id.nil?
      return false if @auth_method.nil?
      auth_method_validator = EnumAttributeValidator.new('String', ["jwt_token", "api_key"])
      return false unless auth_method_validator.valid?(@auth_method)
      return false if @profile.nil?
      return false if @company_id.nil?
      return false if @role_id.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if user_id.nil?
        fail ArgumentError, 'user_id cannot be nil'
      end

      @user_id = user_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auth_method Object to be assigned
    def auth_method=(auth_method)
      validator = EnumAttributeValidator.new('String', ["jwt_token", "api_key"])
      unless validator.valid?(auth_method)
        fail ArgumentError, "invalid value for \"auth_method\", must be one of #{validator.allowable_values}."
      end
      @auth_method = auth_method
    end

    # Custom attribute writer method with validation
    # @param [Object] profile Value to be assigned
    def profile=(profile)
      if profile.nil?
        fail ArgumentError, 'profile cannot be nil'
      end

      @profile = profile
    end

    # Custom attribute writer method with validation
    # @param [Object] company_id Value to be assigned
    def company_id=(company_id)
      if company_id.nil?
        fail ArgumentError, 'company_id cannot be nil'
      end

      @company_id = company_id
    end

    # Custom attribute writer method with validation
    # @param [Object] role_id Value to be assigned
    def role_id=(role_id)
      if role_id.nil?
        fail ArgumentError, 'role_id cannot be nil'
      end

      @role_id = role_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          email == o.email &&
          auth_method == o.auth_method &&
          platform == o.platform &&
          origin_domain == o.origin_domain &&
          profile == o.profile &&
          company_id == o.company_id &&
          role_id == o.role_id &&
          token_metadata == o.token_metadata &&
          api_key_info == o.api_key_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [user_id, email, auth_method, platform, origin_domain, profile, company_id, role_id, token_metadata, api_key_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SparteraApiSdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
