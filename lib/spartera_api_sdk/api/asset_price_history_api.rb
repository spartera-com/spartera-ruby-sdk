=begin
#Spartera API Documentation

#Auto-generated API documentation for REST services of the Spartera platform

The version of the OpenAPI document: 0.0.0
Contact: support@spartera.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module SparteraApiSdk
  class AssetPriceHistoryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the currently active price for an asset
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_prices_active_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_prices_active_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Get the currently active price for an asset
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_prices_active_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_active_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_active_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_active_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/prices/active'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_active_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetPriceHistoryApi#companies_company_id_assets_asset_id_prices_active_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete single price history record by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param aph_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_prices_aph_id_delete(company_id, asset_id, aph_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_prices_aph_id_delete_with_http_info(company_id, asset_id, aph_id, opts)
      data
    end

    # Delete single price history record by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param aph_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_prices_aph_id_delete_with_http_info(company_id, asset_id, aph_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_delete ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_delete"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_delete"
      end
      # verify the required parameter 'aph_id' is set
      if @api_client.config.client_side_validation && aph_id.nil?
        fail ArgumentError, "Missing the required parameter 'aph_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_delete"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/prices/{aph_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s)).sub('{' + 'aph_id' + '}', CGI.escape(aph_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetPriceHistoryApi#companies_company_id_assets_asset_id_prices_aph_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get single price history record by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param aph_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_prices_aph_id_get(company_id, asset_id, aph_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_prices_aph_id_get_with_http_info(company_id, asset_id, aph_id, opts)
      data
    end

    # Get single price history record by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param aph_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_prices_aph_id_get_with_http_info(company_id, asset_id, aph_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_get"
      end
      # verify the required parameter 'aph_id' is set
      if @api_client.config.client_side_validation && aph_id.nil?
        fail ArgumentError, "Missing the required parameter 'aph_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/prices/{aph_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s)).sub('{' + 'aph_id' + '}', CGI.escape(aph_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetPriceHistoryApi#companies_company_id_assets_asset_id_prices_aph_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing price history record by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param aph_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_prices_aph_id_patch(company_id, asset_id, aph_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_prices_aph_id_patch_with_http_info(company_id, asset_id, aph_id, opts)
      data
    end

    # Update an existing price history record by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param aph_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_prices_aph_id_patch_with_http_info(company_id, asset_id, aph_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_patch ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_patch"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_patch"
      end
      # verify the required parameter 'aph_id' is set
      if @api_client.config.client_side_validation && aph_id.nil?
        fail ArgumentError, "Missing the required parameter 'aph_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_patch"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/prices/{aph_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s)).sub('{' + 'aph_id' + '}', CGI.escape(aph_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_aph_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetPriceHistoryApi#companies_company_id_assets_asset_id_prices_aph_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # POST /companies/{company_id}/assets/{asset_id}/prices/calculate_credits
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_prices_calculate_credits_post(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_prices_calculate_credits_post_with_http_info(company_id, asset_id, opts)
      data
    end

    # POST /companies/{company_id}/assets/{asset_id}/prices/calculate_credits
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_prices_calculate_credits_post_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_calculate_credits_post ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_calculate_credits_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_calculate_credits_post"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/prices/calculate_credits'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_calculate_credits_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetPriceHistoryApi#companies_company_id_assets_asset_id_prices_calculate_credits_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # POST /companies/{company_id}/assets/{asset_id}/prices/discount
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_prices_discount_post(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_prices_discount_post_with_http_info(company_id, asset_id, opts)
      data
    end

    # POST /companies/{company_id}/assets/{asset_id}/prices/discount
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_prices_discount_post_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_discount_post ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_discount_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_discount_post"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/prices/discount'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_discount_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetPriceHistoryApi#companies_company_id_assets_asset_id_prices_discount_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all price history records for a specific asset
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_prices_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_prices_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Get all price history records for a specific asset
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_prices_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/prices'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetPriceHistoryApi#companies_company_id_assets_asset_id_prices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new price history record for an asset
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_prices_post(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_prices_post_with_http_info(company_id, asset_id, opts)
      data
    end

    # Create a new price history record for an asset
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_prices_post_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_post ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_post"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/prices'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AssetPriceHistoryApi.companies_company_id_assets_asset_id_prices_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetPriceHistoryApi#companies_company_id_assets_asset_id_prices_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
