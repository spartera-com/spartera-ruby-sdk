=begin
#Spartera API Documentation

#Auto-generated API documentation for REST services of the Spartera platform

The version of the OpenAPI document: 0.0.0
Contact: support@spartera.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module SparteraApiSdk
  class AlertsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete single alert by ID
    # @param company_id [String] 
    # @param user_id [String] 
    # @param alert_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_users_user_id_alerts_alert_id_delete(company_id, user_id, alert_id, opts = {})
      data, _status_code, _headers = companies_company_id_users_user_id_alerts_alert_id_delete_with_http_info(company_id, user_id, alert_id, opts)
      data
    end

    # Delete single alert by ID
    # @param company_id [String] 
    # @param user_id [String] 
    # @param alert_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_users_user_id_alerts_alert_id_delete_with_http_info(company_id, user_id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.companies_company_id_users_user_id_alerts_alert_id_delete ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_delete"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_delete"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_delete"
      end
      # resource path
      local_var_path = '/companies/{company_id}/users/{user_id}/alerts/{alert_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'alert_id' + '}', CGI.escape(alert_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.companies_company_id_users_user_id_alerts_alert_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#companies_company_id_users_user_id_alerts_alert_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get single alert by ID
    # @param company_id [String] 
    # @param user_id [String] 
    # @param alert_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_users_user_id_alerts_alert_id_get(company_id, user_id, alert_id, opts = {})
      data, _status_code, _headers = companies_company_id_users_user_id_alerts_alert_id_get_with_http_info(company_id, user_id, alert_id, opts)
      data
    end

    # Get single alert by ID
    # @param company_id [String] 
    # @param user_id [String] 
    # @param alert_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_users_user_id_alerts_alert_id_get_with_http_info(company_id, user_id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.companies_company_id_users_user_id_alerts_alert_id_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_get"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/users/{user_id}/alerts/{alert_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'alert_id' + '}', CGI.escape(alert_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.companies_company_id_users_user_id_alerts_alert_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#companies_company_id_users_user_id_alerts_alert_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing alert by ID
    # @param company_id [String] 
    # @param user_id [String] 
    # @param alert_id [String] 
    # @param alert [Alert] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_users_user_id_alerts_alert_id_patch(company_id, user_id, alert_id, alert, opts = {})
      data, _status_code, _headers = companies_company_id_users_user_id_alerts_alert_id_patch_with_http_info(company_id, user_id, alert_id, alert, opts)
      data
    end

    # Update an existing alert by ID
    # @param company_id [String] 
    # @param user_id [String] 
    # @param alert_id [String] 
    # @param alert [Alert] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_users_user_id_alerts_alert_id_patch_with_http_info(company_id, user_id, alert_id, alert, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.companies_company_id_users_user_id_alerts_alert_id_patch ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_patch"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_patch"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_patch"
      end
      # verify the required parameter 'alert' is set
      if @api_client.config.client_side_validation && alert.nil?
        fail ArgumentError, "Missing the required parameter 'alert' when calling AlertsApi.companies_company_id_users_user_id_alerts_alert_id_patch"
      end
      # resource path
      local_var_path = '/companies/{company_id}/users/{user_id}/alerts/{alert_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'alert_id' + '}', CGI.escape(alert_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(alert)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.companies_company_id_users_user_id_alerts_alert_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#companies_company_id_users_user_id_alerts_alert_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all alerts for a specific asset
    # @param company_id [String] 
    # @param user_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_users_user_id_alerts_asset_asset_id_all_get(company_id, user_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_users_user_id_alerts_asset_asset_id_all_get_with_http_info(company_id, user_id, asset_id, opts)
      data
    end

    # Get all alerts for a specific asset
    # @param company_id [String] 
    # @param user_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_users_user_id_alerts_asset_asset_id_all_get_with_http_info(company_id, user_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_all_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_all_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_all_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_all_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/users/{user_id}/alerts/asset/{asset_id}/all'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_all_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#companies_company_id_users_user_id_alerts_asset_asset_id_all_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all alerts for a specific asset (by user)
    # @param company_id [String] 
    # @param user_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_users_user_id_alerts_asset_asset_id_get(company_id, user_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_users_user_id_alerts_asset_asset_id_get_with_http_info(company_id, user_id, asset_id, opts)
      data
    end

    # Get all alerts for a specific asset (by user)
    # @param company_id [String] 
    # @param user_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_users_user_id_alerts_asset_asset_id_get_with_http_info(company_id, user_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/users/{user_id}/alerts/asset/{asset_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.companies_company_id_users_user_id_alerts_asset_asset_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#companies_company_id_users_user_id_alerts_asset_asset_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all alerts for a specific user
    # @param company_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_users_user_id_alerts_get(company_id, user_id, opts = {})
      data, _status_code, _headers = companies_company_id_users_user_id_alerts_get_with_http_info(company_id, user_id, opts)
      data
    end

    # Get a list of all alerts for a specific user
    # @param company_id [String] 
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_users_user_id_alerts_get_with_http_info(company_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.companies_company_id_users_user_id_alerts_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_get"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/users/{user_id}/alerts'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.companies_company_id_users_user_id_alerts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#companies_company_id_users_user_id_alerts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # POST /companies/{company_id}/users/{user_id}/alerts
    # @param company_id [String] 
    # @param user_id [String] 
    # @param alert [Alert] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_users_user_id_alerts_post(company_id, user_id, alert, opts = {})
      data, _status_code, _headers = companies_company_id_users_user_id_alerts_post_with_http_info(company_id, user_id, alert, opts)
      data
    end

    # POST /companies/{company_id}/users/{user_id}/alerts
    # @param company_id [String] 
    # @param user_id [String] 
    # @param alert [Alert] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_users_user_id_alerts_post_with_http_info(company_id, user_id, alert, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.companies_company_id_users_user_id_alerts_post ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_post"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AlertsApi.companies_company_id_users_user_id_alerts_post"
      end
      # verify the required parameter 'alert' is set
      if @api_client.config.client_side_validation && alert.nil?
        fail ArgumentError, "Missing the required parameter 'alert' when calling AlertsApi.companies_company_id_users_user_id_alerts_post"
      end
      # resource path
      local_var_path = '/companies/{company_id}/users/{user_id}/alerts'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(alert)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AlertsApi.companies_company_id_users_user_id_alerts_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#companies_company_id_users_user_id_alerts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
