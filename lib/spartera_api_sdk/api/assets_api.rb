=begin
#Spartera API Documentation

#Auto-generated API documentation for REST services of the Spartera platform

The version of the OpenAPI document: 0.0.0
Contact: support@spartera.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module SparteraApiSdk
  class AssetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Process assets route that handles both owned and purchased assets.             Minimal route function that passes all logic to crudder.process_asset              Args:                 asset_path: The path after /analyze/ containing asset information                 company_handle: The subdomain from Flask's routing (if available)
    # @param company_handle [String] 
    # @param asset_slug [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def analyze_company_handle_assets_asset_slug_get(company_handle, asset_slug, opts = {})
      data, _status_code, _headers = analyze_company_handle_assets_asset_slug_get_with_http_info(company_handle, asset_slug, opts)
      data
    end

    # Process assets route that handles both owned and purchased assets.             Minimal route function that passes all logic to crudder.process_asset              Args:                 asset_path: The path after /analyze/ containing asset information                 company_handle: The subdomain from Flask&#39;s routing (if available)
    # @param company_handle [String] 
    # @param asset_slug [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def analyze_company_handle_assets_asset_slug_get_with_http_info(company_handle, asset_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.analyze_company_handle_assets_asset_slug_get ...'
      end
      # verify the required parameter 'company_handle' is set
      if @api_client.config.client_side_validation && company_handle.nil?
        fail ArgumentError, "Missing the required parameter 'company_handle' when calling AssetsApi.analyze_company_handle_assets_asset_slug_get"
      end
      # verify the required parameter 'asset_slug' is set
      if @api_client.config.client_side_validation && asset_slug.nil?
        fail ArgumentError, "Missing the required parameter 'asset_slug' when calling AssetsApi.analyze_company_handle_assets_asset_slug_get"
      end
      # resource path
      local_var_path = '/analyze/{company_handle}/assets/{asset_slug}'.sub('{' + 'company_handle' + '}', CGI.escape(company_handle.to_s)).sub('{' + 'asset_slug' + '}', CGI.escape(asset_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.analyze_company_handle_assets_asset_slug_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#analyze_company_handle_assets_asset_slug_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete single asset by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_delete(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_delete_with_http_info(company_id, asset_id, opts)
      data
    end

    # Delete single asset by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_delete_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_delete ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_delete"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_delete"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get single asset by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Get single asset by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the information schema for a specific asset's table
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_infoschema_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_infoschema_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Get the information schema for a specific asset&#39;s table
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_infoschema_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_infoschema_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_infoschema_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_infoschema_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/infoschema'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_infoschema_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_infoschema_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the information schema for a specific asset and save it to the asset's asset_schema field
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_infoschema_save_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_infoschema_save_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Get the information schema for a specific asset and save it to the asset&#39;s asset_schema field
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_infoschema_save_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_infoschema_save_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_infoschema_save_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_infoschema_save_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/infoschema/save'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_infoschema_save_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_infoschema_save_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing asset by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param asset [Asset] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_patch(company_id, asset_id, asset, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_patch_with_http_info(company_id, asset_id, asset, opts)
      data
    end

    # Update an existing asset by ID
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param asset [Asset] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_patch_with_http_info(company_id, asset_id, asset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_patch ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_patch"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_patch"
      end
      # verify the required parameter 'asset' is set
      if @api_client.config.client_side_validation && asset.nil?
        fail ArgumentError, "Missing the required parameter 'asset' when calling AssetsApi.companies_company_id_assets_asset_id_patch"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(asset)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get AI-predicted pricing for a specific asset
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_predicted_price_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_predicted_price_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Get AI-predicted pricing for a specific asset
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_predicted_price_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_predicted_price_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_predicted_price_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_predicted_price_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/predicted_price'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_predicted_price_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_predicted_price_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detailed explanation of how asset recommendations are calculated for debugging purposes.
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_recommendations_explain_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_recommendations_explain_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Get detailed explanation of how asset recommendations are calculated for debugging purposes.
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_recommendations_explain_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_recommendations_explain_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_recommendations_explain_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_recommendations_explain_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/recommendations/explain'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_recommendations_explain_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_recommendations_explain_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get asset recommendations for a specific asset using heuristic waterfall matching     Returns list of similar assets based on industry, company, connection, tags, etc.      Query Parameters:     - limit: Number of recommendations to return (default: 12, max: 50)     - min_score: Minimum similarity score threshold (default: 0.1)     - include_details: Include component similarity scores (default: false)
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit 
    # @option opts [String] :min_score 
    # @option opts [String] :include_details 
    # @return [Object]
    def companies_company_id_assets_asset_id_recommendations_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_recommendations_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Get asset recommendations for a specific asset using heuristic waterfall matching     Returns list of similar assets based on industry, company, connection, tags, etc.      Query Parameters:     - limit: Number of recommendations to return (default: 12, max: 50)     - min_score: Minimum similarity score threshold (default: 0.1)     - include_details: Include component similarity scores (default: false)
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit 
    # @option opts [String] :min_score 
    # @option opts [String] :include_details 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_recommendations_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_recommendations_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_recommendations_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_recommendations_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/recommendations'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'min_score'] = opts[:'min_score'] if !opts[:'min_score'].nil?
      query_params[:'include_details'] = opts[:'include_details'] if !opts[:'include_details'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_recommendations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_recommendations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get statistics for a specific asset (public endpoint)
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_statistics_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_statistics_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Get statistics for a specific asset (public endpoint)
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_statistics_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_statistics_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_statistics_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_statistics_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/statistics'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_statistics_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_statistics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Test out an Asset (on a subset of data)
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_asset_id_test_get(company_id, asset_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_asset_id_test_get_with_http_info(company_id, asset_id, opts)
      data
    end

    # Test out an Asset (on a subset of data)
    # @param company_id [String] 
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_asset_id_test_get_with_http_info(company_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_asset_id_test_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_asset_id_test_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetsApi.companies_company_id_assets_asset_id_test_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/{asset_id}/test'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_asset_id_test_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_asset_id_test_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all assets for a specific company
    # @param company_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_get(company_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_get_with_http_info(company_id, opts)
      data
    end

    # Get all assets for a specific company
    # @param company_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_get_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new asset
    # @param company_id [String] 
    # @param asset [Asset] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_post(company_id, asset, opts = {})
      data, _status_code, _headers = companies_company_id_assets_post_with_http_info(company_id, asset, opts)
      data
    end

    # Create a new asset
    # @param company_id [String] 
    # @param asset [Asset] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_post_with_http_info(company_id, asset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_post ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_post"
      end
      # verify the required parameter 'asset' is set
      if @api_client.config.client_side_validation && asset.nil?
        fail ArgumentError, "Missing the required parameter 'asset' when calling AssetsApi.companies_company_id_assets_post"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(asset)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get recommendations for multiple assets in a single request. Useful for pre-loading recommendations.
    # @param company_id [String] 
    # @param asset [Asset] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_recommendations_bulk_post(company_id, asset, opts = {})
      data, _status_code, _headers = companies_company_id_assets_recommendations_bulk_post_with_http_info(company_id, asset, opts)
      data
    end

    # Get recommendations for multiple assets in a single request. Useful for pre-loading recommendations.
    # @param company_id [String] 
    # @param asset [Asset] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_recommendations_bulk_post_with_http_info(company_id, asset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_recommendations_bulk_post ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_recommendations_bulk_post"
      end
      # verify the required parameter 'asset' is set
      if @api_client.config.client_side_validation && asset.nil?
        fail ArgumentError, "Missing the required parameter 'asset' when calling AssetsApi.companies_company_id_assets_recommendations_bulk_post"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/recommendations/bulk'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(asset)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_recommendations_bulk_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_recommendations_bulk_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Health check for the recommendations system with sample data and performance metrics.
    # @param company_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_recommendations_health_get(company_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_recommendations_health_get_with_http_info(company_id, opts)
      data
    end

    # Health check for the recommendations system with sample data and performance metrics.
    # @param company_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_recommendations_health_get_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_recommendations_health_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_recommendations_health_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/recommendations/health'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_recommendations_health_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_recommendations_health_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get statistics for all assets the user has access to
    # @param company_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def companies_company_id_assets_statistics_get(company_id, opts = {})
      data, _status_code, _headers = companies_company_id_assets_statistics_get_with_http_info(company_id, opts)
      data
    end

    # Get statistics for all assets the user has access to
    # @param company_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def companies_company_id_assets_statistics_get_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.companies_company_id_assets_statistics_get ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AssetsApi.companies_company_id_assets_statistics_get"
      end
      # resource path
      local_var_path = '/companies/{company_id}/assets/statistics'.sub('{' + 'company_id' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AssetsApi.companies_company_id_assets_statistics_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#companies_company_id_assets_statistics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
